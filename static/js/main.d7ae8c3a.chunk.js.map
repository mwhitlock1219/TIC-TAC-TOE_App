{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","winLine","this","key","squares","includes","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","slice","length","calculateWinner","winner","setState","concat","latestMoveSquare","step","status","current","winInfo","moves","map","move","col","Math","floor","desc","jumpTo","isDraw","reverse","handleClick","line","handleSortToggle","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7ae8c3a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nfunction Square(props) {\r\n  const className = \"square\" + (props.highlight ? \" highlight\" : \"\");\r\n  return (\r\n    <button className={className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    const winLine = this.props.winLine;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        highlight={winLine && winLine.includes(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // Use two loops to make the squares\r\n    const boardSize = 3;\r\n    let squares = [];\r\n    for (let i = 0; i < boardSize; ++i) {\r\n      let row = [];\r\n      for (let j = 0; j < boardSize; ++j) {\r\n        row.push(this.renderSquare(i * boardSize + j));\r\n      }\r\n      squares.push(\r\n        <div key={i} className=\"board-row\">\r\n          {row}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div>{squares}</div>;\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isAscending: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          // Store the index of the latest moved square\r\n          latestMoveSquare: i,\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  handleSortToggle() {\r\n    this.setState({\r\n      isAscending: !this.state.isAscending,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const stepNumber = this.state.stepNumber;\r\n    const current = history[stepNumber];\r\n    const winInfo = calculateWinner(current.squares);\r\n    const winner = winInfo.winner;\r\n\r\n    let moves = history.map((step, move) => {\r\n      const latestMoveSquare = step.latestMoveSquare;\r\n      const col = 1 + (latestMoveSquare % 3);\r\n      const row = 1 + Math.floor(latestMoveSquare / 3);\r\n      const desc = move\r\n        ? `Go to move #${move} (${col}, ${row})`\r\n        : \"Go to game start\";\r\n      return (\r\n        <li key={move}>\r\n          {/* Bold the currently selected item */}\r\n          <button\r\n            className={move === stepNumber ? \"move-list-item-selected\" : \"\"}\r\n            onClick={() => this.jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      if (winInfo.isDraw) {\r\n        status = \"Draw\";\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n    }\r\n\r\n    const isAscending = this.state.isAscending;\r\n    if (!isAscending) {\r\n      moves.reverse();\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winLine={winInfo.line}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button onClick={() => this.handleSortToggle()}>\r\n            {isAscending ? \"descending\" : \"ascending\"}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        winner: squares[a],\r\n        line: lines[i],\r\n        isDraw: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  let isDraw = true;\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] === null) {\r\n      isDraw = false;\r\n      break;\r\n    }\r\n  }\r\n  return {\r\n    winner: null,\r\n    line: null,\r\n    isDraw: isDraw,\r\n  };\r\n}\r\n"],"sourceRoot":""}